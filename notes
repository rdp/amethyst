
performance hit of checking for overflow:
 4.15 (~4.2) before, 4.36 (~4.42) (at times) after. meh :P

unable to infer type: https://github.com/rdp/stevia/commit/0a233105bf7ebc51ede991efdc270dd17811a59f argh! matey! needs a better error message! arrr!

it should not let you define the same interface twice, same methods. No that is scawah.

class Yo
 def equals(o:Object)
   print 'in equals'
   false
 end
end

interface Implements__equals do
  def equals(o:Yo):boolean # I guess this will force them to output a boolean last statement, which is ok
  # what about them wanting to be able to output void (or "a boolean here" or what not...)

  end
end


# should I make this class static? cache it [in a hash]?
class RubyInt  < Yo
  implements Implements__equals

  $Override
  def equals(o)
    33
  end

end


I can just allow mirah to infer the return type as boolean or RubyObj I think that'll work..I believe so.

there are three classes of methods.
   abc!? # mirah land only -- not worth it for me
   == # never use!
   +- # mirah land only
    << # not even mirah can handle this one? NativeException: java.lang.ClassFormatError: Illegal method name "<<" in class Testy

nice would be an option to have java line numbers [?] I guess it already does through the java compiler...yeah.



java straight, with Integer objects:
  3.70

jdk6 jruby server: 25.14 25.23
jdk7 jruby server: 25.65 25.37
jdk7 jruby client: 48.47


using a cached "one" without the block took me back down to 4.43...cacheing dubious in this case... ?

adding in "more interfaces" seemed to not cause any problem to times.

removing extra "local variables" within the method sped up to

  server: 4.13 (from 4.5)
  client: 12s
  jruby server: 24 (6x)

compared with ~4.01 for mirah straight now

java -server Go2/mir
worked
4.5, 4.4
  4.36 with optimized numbers...which are just too scary overall anyway...maybe...

compared to 4.1, 4.05 mirah normal [not too shabby actually] 26 jruby server


could do:
  def a
   3 + 4
  end
  
  optimize out to
  three = RubyInt.new(3)
  four = RubyInt.new(4)
  def a
   plusser(three) + four
  end

  also maybe "if it's +3 then call takesPlusInt(a)+3 ?
  
def times(call_me:CallableOneArg):Object
  puts call_me
end
 => Yoyo.mir$__xform_tmp_2@5b02a6

can we make this prettier?


should it disallow this?

interface CallableOneArg do
  def call(arg1:RubyObj):RubyObj
  end
end

interface CallableOneArg do
  def call(arg1:RubyObj):RubyObj
  end
end



interface MyInterface do
  def run(a:int); end
end
def go(block:MyInterface)
  block.run(3)
end
go { 4; nil }

Inference Error:
Inferred return type Type(int) is incompatible with declared Type(null)

so...maybe interfaces should be *required* to note the return type? huh?



possible bug:

a = 3
a = 3.times {
  nil
}

failz on assignment...not sure if I care though...


puts 'past go', a # failz...


ruby-zy array stuffs...

[] << 4

stevia vaguely related to chocolate (like java) but flavoring.

go.mr:7: Cannot find instance method <<(int) on java.util.ArrayList
         fib_array << (int(fib_array.get(i)) + int(fib_array.get(i+1)))

is that ever possible?

or

fib_array[23] ?  should it infer "get" 
[] << 4  ? should it infer...add ?


does their inferred self actually infer self LOL.


does mirah want to be able to do things like that, or 


wrap jruby's stdlib itself?

or just wrap stringbuffer,arraylist [or wrappers for the same...]?

ask others for a ruby wishlist? :P


go.mr:10: Cannot find instance method +(java.lang.Object) on java.lang.Object
         fib_array << (fib_array.get(i) + fib_array.get(i+1))

hmm...

RubyObject

 + RubyObject

int + int
string + string
string + fixnum



ooh ooh '' + 3 work :) [just call to_str or what not]

ooh the abstract class can just raise for everything in it :P
  maybe sane hashcodes though...hmm...a sane default hashcode...hmm...
  auto generate a sane hashcode?


charsequence for string :)

my string will have to implement Interface CharSequence I'd wager...so that they can pass through strings and it survive :P



I *need* to be able to say

if 'a' == 'b'
I need it. please? please?!


it needs to check for nil *or* false in if statements...[or does mirah already do this?]


maybe I can let it parse their code along with the sum of the original mirah code iff they make changes to core classes?

[todo: can mirah add to classes later, easily, yet?]


might be nice to have call by arg name as method_name(:abc => :def) or what not. Yeah.  If they want a hash they have to make it explicit? hmm...
