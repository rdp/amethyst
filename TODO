
accomodate:  "20000000000000000000"
email mirah "is this is a good idea" what other work is like this?

a "to jruby and parse the return" bridge
  return parser... :P

a parser generator [redparse]?

equals, array right class

== LODO ==

@mirah: Did you consider renaming Scala's Vector class with an import? 
  aliases' ?
  import fj.control.parallel.ParModule._


umm...do I want to use immutable by default? huh? I guess scala forces you to decide on the fly eh...it seems to me like the default should be immutable it seems like I should study up on the competition first, to see what they are doing...why not?.

a "from java and back" munger? [maybe just Me.to_robj(anything) for all parameters :P ]

fix http://code.google.com/p/mirah/issues/detail?id=50 []= not working, so my arrays can be happy

mirahc doesn't return right errorlevel it appears...

c:\dev\ruby\stevia\lib>jruby -S mirahc std_lib_ruby_int
...
c:\dev\ruby\stevia\lib>echo %ERRORLEVEL%
0

backtraces on the command line

named arguments LOL

symbols at all LOL [strings for now... ?]

"constant-ify" int literals et al...I think...string literals not so much :P

implements -> real method name

some type of reflection enumeration...though I guess java has my back there :P
ability to use .send in order to run unit tests (again, java has my back there)

a demo of me calling into raw java shtuffs...and it work :P

http://code.google.com/p/mirah/issues/detail?id=68 java.lang.NoSuchFieldError: c the wrong byte code...if I ever want to use mirah stevia_specs again :P

@mirah: reopena-ble classes? plz?

possibly fix the @@bug so I can use real cacheing [?[
]]

make it so it can use a "ruby to_i"  except I might not want to since they can do that for me...maybe?

[1,2,3][random_object] uh guess...

auto ruby class -> mirah wrapper generator LOL

inline docu/source location somehow?

repl

2+2

sinatra :P

alioth benchmarks [run my stuff against them :P]

tell mirah they should auto-generate shpiffy hashcode and toStrings for me :)

@mirah: change parameter names if I use _.  Please?
  repl

is invokedynamic faster somehow?

@mirah: $Override seemingly does nothing [?] -- also if it says it Implements x it doesn't verify that it does
  no for loop possible?
  super doesn't work?
  hashcode, !? methods
  
import scala.collection.mutable.HashSet for Hashes [?]

named parameters LOL

[1,2,3].threaded(5) { |t|
  t.map{|e| e.to_string}.reject{}.reject! [?]
  33
  t.synchronize_once.map{|t| t.yoyo}.in_order.map{|t|}.synchronize_once.in_order.map{|t|} LOL if anybody ever asks for those.
  
  First pass: just map! map! map! LOL

}


auto-promotion of ints et al [see if it's slower to just use long...]

can call java straight, a la

real_java_class.real_java_method(arg1.to_jint, arg2.to_jint)

cache to speedup parsing

can run scripted jruby.rb scripting java files LOL

macros/erb/clojure...

some inspect-er method?

nutter blog response?
