#
# the std lib/common hand-brew interfaces
#

import java.util.ArrayList
import java.util.Collections

# eventually we'll probably need this class for doing the "system" or whatever the Kernel shtuff is...
# Note that I've munged -, +, and <<, and should munge == and []= though the latter might be ok...
# ___plus lessThan
# appears that [] also doesn't compile down to java...sigh...
#

class RubyObj
  # 
  # def this
  #  self # use self !
  # end

  $Override
  def equals(o:Object):boolean
    raise 'you are calling RubyObj.equals accidentally somehow [no implemented, or wrong method] ' + self.getClass.toString + " " + self.toString # the inner classes need to implement this or they are hosed
  end
  
  def p(o:Object)
    puts o
  end

end

# LODO I think I don't need Implements equals...I don't think so anyway...

interface Implements__equals do

  def equals(o:RubyObj):boolean # I guess this will force them to output a boolean last statement, which is ok
  # what about them wanting to be able to output void (or "a boolean here" or what not...)
  
  # I wonder if there's a better way somehow...like class RubyInt: def equals(RubyInt); but I can't think of one right now off the top of my head.
  
  end
end

interface Implements__get do
  def get(o:RubyObj):RubyObj
  end
end

interface ImplementsLessThanLessThanOneArg do
  def lessThanLessThan(o:RubyObj):RubyObj
  end
end

interface ImplementsLessThanOneArg do
  def lessThan(o:RubyObj):boolean
  end
end


interface ImplementsLessThanLessThanOneArg2 do
  def lessThanLessThan33(o:RubyObj):RubyObj
  end
end


interface ImplementsMinusOneArg do
  def ___minus(o:RubyObj):RubyObj
  end
end

interface ImplementsPlusOneArg do
  def ___plus(o:RubyObj):RubyObj
  end
end

interface ImplementsToJavaI do
  def to_java_i():long
  end
end

# LODO should blocks descend from some rubyobj interface maybe?

interface CallableOneArg do
  def call(arg1:RubyObj):RubyObj
  end
end

# LODO within the class, don't need to define parameters, do need $Overide

interface TimesZeroArgBlockOneArg do
  def times(block:CallableOneArg):RubyObj
  end
end

interface BracketOneArg do
  def [](offset:ImplementsToJavaI):RubyObj
  end
end

# interfaces are loosy-goosey! Yes!

class RubyArray < ArrayList # ArrayList<RubyObj> ?? < RubyObj ?
  implements BracketOneArg, ImplementsLessThanLessThanOneArg
  
  #def <<(o:RubyObj) # ??
  #  add o
  #end
  
  def lessThanLessThan(o:RubyObj)
    add o
    o
  end
  
  implements Implements__get

  $Override
  def get(idx:RubyObj) # XXXX why can't it infer this one either?
    RubyObj(get(int(ImplementsToJavaI(idx).to_java_i)))
  end
  
  def [](idx:RubyObj):RubyObj 
    # calling to_i is what ruby seems to always do...
    # RubyInt i = ... LODO allow non core classes to be offsets...or maybe I should force them to call their own to_i I'm down with that :P
    RubyObj(get(int(ImplementsToJavaI(idx).to_java_i)))
  end
  
  # TODO []=
  
  def initialize
    super
  end
  
  def initialize(o:java.util.List)
    addAll(o) # super doesn't work [bug]
  end
  
  # NB this is actually sort! [sort bang]
  
  def sort
    Collections.sort(self) {|a,b| ImplementsLessThanOneArg(RubyObj(a)).lessThan(RubyObj(b)) ? 0 : 1}
    self
  end
  
  implements Implements__equals
  
  $Override
  def equals(o:RubyObj)
    puts 'in array equal'
        puts 'in array equal'

    self.equals(Object(o)) # try to use ArrayList' equals method...
  end
  
end

# for demo of what the actual stevia code looks like, see profile_stev class

# same dir means same package ja?
# require 'go2.mir'
