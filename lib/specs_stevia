# same dir means same package ja?  # require 'go2.mir'

#RubyInt.new(1) - RubyInt.new(2) # shows a mirahc -j compile bug
#RubyInt.new(1) + RubyInt.new(2) # same here

b = 1
RubyInt.new(2).times do |n| 
# ICE  b += ImplementsToJavaI(n).to_java_i
  b += 1
  nil
end

raise 'yo1' unless b == 3

raise 'yo2' unless ImplementsToJavaI((RubyInt.new(1).___minus RubyInt.new(2))).to_java_i == -1

c = RubyObj(nil)
c = RubyInt.new(1)
#d = rubyInt.new(1)

RubyInt.new(55).times do |n| 
  c = ImplementsPlusOneArg(c).___plus n
#  ImplementsPlusOneArg(d) += RubyInt.new(1)
end

raise 'equals failed!' unless RubyInt.new(1486).equals(RubyInt.new(1486))

begin
 c.equals RubyInt.new(14) # expected to fail really...
 puts 'YOU SHOULD NEVER SEE THIS' # dunno how to catch Throwable...
rescue RuntimeException
end

# we maybe could leave == as .equals, hmmm...that sounds like more work though :P

e = (c == RubyInt.new(1486)) # native boolean type...scawah!
f = (Implements__equals(c).equals(RubyInt.new(1487))) # native boolean type...scawah!
raise if f

g = RubyInt.new(Integer.MAX_VALUE - 30 )
h = ImplementsPlusOneArg(g).___plus RubyInt.new(15) # not overflow, just close :P
got_here = false
begin
  h = ImplementsPlusOneArg(g).___plus RubyInt.new(33) # overflow!
rescue Exception
  got_here = true
end
raise unless got_here

puts 'specs passed'
